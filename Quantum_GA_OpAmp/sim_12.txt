  PM_12 = phaseMargin((VF("/out_12") / VF("/in_p")))
  DC_gain_12 = value(dB20((VF("/out_12") / VF("/in_p"))) 1)
  A_cm_12 = value(dB20((VF("/out_cmrr_12") / VF("/in_cmrr"))) 1)
  CMRR_12 = DC_gain_12 - A_cm_12
  UGB_12 = unityGainFreq((VF("/out_12") / VF("/in_p")))
  Power_12 = 1.2*(OP("/I283/M4","id") + OP("/I283/M5","id"))
  SR_12 = slewRate(VT("/out_sr_12") ymin(VT("/out_sr_12")) nil ymax(VT("/out_sr_12")) nil 10 90 nil "time")
  PSRR_n_12 = value(dB20((VF("/VDD_psrr_n_12") / VF("/out_psrr_n_12"))) 1)
  PSRR_p_12 = value(dB20((VF("/VDD_psrr_p_12") / VF("/out_psrr_p_12"))) 1)
 
  fprintf(fout "%d\n", cond_12)
  fprintf(fout "%f\n", PM_12)
  fprintf(fout "%f\n", DC_gain_12)
  fprintf(fout "%f\n", CMRR_12)
  fprintf(fout "%f\n", UGB_12*1e-6)
  fprintf(fout "%f\n", Power_12*1e+6)
  fprintf(fout "%f\n", PSRR_n_12)
  fprintf(fout "%f\n", PSRR_p_12)
  fprintf(fout "%f\n", SR_12*1e-6)

